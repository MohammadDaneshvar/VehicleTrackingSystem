// <auto-generated />
using System;
using Framework.Domain.Enum;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Vehicle.Infra.Persistance.EF;

namespace Vehicle.Infra.Persistance.EF.Migrations
{
    [DbContext(typeof(VehicleDbContext))]
    [Migration("20201216094334_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Vehicle.Domain.Logs.ApplicationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Callsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip")
                        .HasColumnName("IP")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Logged")
                        .HasColumnType("datetime");

                    b.Property<string>("Logger")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ApplicationLog");
                });

            modelBuilder.Entity("Vehicle.Domain.Permission", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("id")
                        .HasName("PermissionId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Vehicle.Domain.Permissions.Role", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("id")
                        .HasName("RoleId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Vehicle.Domain.PropertyTypes.Option", b =>
                {
                    b.Property<int?>("PropertyTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnName("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("PropertyTypeId");

                    b.ToTable("Option");
                });

            modelBuilder.Entity("Vehicle.Domain.PropertyTypes.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("PropertyType")
                        .HasColumnType("tinyint");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PropertyTypeId");

                    b.ToTable("PropertyType");

                    b.HasDiscriminator<byte>("PropertyType");
                });

            modelBuilder.Entity("Vehicle.Domain.RolePermission", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("Vehicle.Domain.UserRole", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Vehicle.Domain.VehiclePositions.PropertyValue", b =>
                {
                    b.Property<int>("VehiclePositionId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehiclePositionId", "PropertyId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyValue");
                });

            modelBuilder.Entity("Vehicle.Domain.VehiclePositions.VehiclePosition", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Point>("Point")
                        .HasColumnType("geography");

                    b.Property<DateTime>("RegDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("id")
                        .HasName("VehiclePositionId");

                    b.ToTable("VehiclePosition");
                });

            modelBuilder.Entity("Vehicle.Domain.VehicleProperties.Property", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PropertyId");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("Vehicle.Domain.Vehicles.VehicleDomain", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("GPSDeviceSerial")
                        .HasColumnType("bigint");

                    b.Property<string>("PublicKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("VehicleECUNumber")
                        .HasColumnType("bigint");

                    b.HasKey("id")
                        .HasName("VehicleId");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("Vehicle.Domain.PropertyTypes.NumericType", b =>
                {
                    b.HasBaseType("Vehicle.Domain.PropertyTypes.PropertyType");

                    b.Property<long>("Max")
                        .HasColumnName("Max")
                        .HasColumnType("bigint");

                    b.Property<long>("Min")
                        .HasColumnName("Min")
                        .HasColumnType("bigint");

                    b.HasDiscriminator().HasValue((byte)1);
                });

            modelBuilder.Entity("Vehicle.Domain.PropertyTypes.SelectiveType", b =>
                {
                    b.HasBaseType("Vehicle.Domain.PropertyTypes.PropertyType");

                    b.HasDiscriminator().HasValue((byte)2);
                });

            modelBuilder.Entity("Vehicle.Domain.PropertyTypes.TextType", b =>
                {
                    b.HasBaseType("Vehicle.Domain.PropertyTypes.PropertyType");

                    b.HasDiscriminator().HasValue((byte)0);
                });

            modelBuilder.Entity("Vehicle.Domain.PropertyTypes.Option", b =>
                {
                    b.HasOne("Vehicle.Domain.PropertyTypes.SelectiveType", null)
                        .WithMany()
                        .HasForeignKey("PropertyTypeId");
                });

            modelBuilder.Entity("Vehicle.Domain.VehiclePositions.PropertyValue", b =>
                {
                    b.HasOne("Vehicle.Domain.VehicleProperties.Property", "Property")
                        .WithMany("PropertyValues")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vehicle.Domain.VehiclePositions.VehiclePosition", "VehiclePosition")
                        .WithMany("propertyValues")
                        .HasForeignKey("VehiclePositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
